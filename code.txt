// REST PARAMS
// 1
function sendCars(...allCarIds) {
    allCarIds.forEach(id => console.log(id));
}
sendCars(100, 200, 555);
//2
function sendCars(day, ...allCarIds) {
    allCarIds.forEach(id => console.log(id));
}
// 3 DESTRUCTRING ARRAYS
let carIds = [1, 2, 5];
let [car1, car2, car3] = carIds;
console.log(car1, car2, car3);

// 4 DESTRUCTRING ARRAYS with REST
let carIds = [1, 2, 5]; 
let car1, remainingCars;
[car1, ...remainingCars] = carIds;
console.log(car1, remainingCars); 

//5 DESTRUCTRING objects
let car = { id: 5000, style: 'convertible' }; let { id, style } = car;
console.log(id, style); 

// SPREAD SYNTAX
function startCars(car1, car2, car3) { 
    console.log(car1, car2, car3); }
let carIds = [100, 300, 500]; 
startCars(...carIds); 

// IIFE 1
let func = function () { 
  console.log('in function'); 
};

// need to call function explictly
func();

// IIFE 2
(function () { 
  console.log('in IIFE function'); 
})();

// IIFE 3
let app = (function() 
{ 
  let carId = 123; 
  console.log('in function'); 
  return { }; 
})();

console.log(app);

// CLOSURE
let app = (function () {
  let carId = 123;
  let getId = function () {
    return carId;
  };
  return { getId: getId };
})();
console.log(app.getId());

// ARROW FUNCS 1
let getId = () => 123;
console.log( getId() ); // 123

// ARROW FUNCS 2
let getId = prefix => prefix + 123;
console.log( getId('ID: ') ); // ID: 123

// ARROW FUNCS 3

let getId = (prefix, suffix) => prefix + 123 + suffix;
console.log( getId('ID: ', '!') ); // ID: 123!

// CLASS 
class Car {
  constructor(id) {
    this.id = id;
  }
}
let car = new Car(123); 
console.log(car.id); 

// Modules (car.js)
export class Car { 
    constructor(id) { 
        this.id = id; 
    } 
    identify() { 
        return `Car Id: ${this.id}`; 
    } 
}

// Modules (index.js)
import { Car } from './car';
let car = new Car(123);
console.log(car.identify());

// Timers 1
let timeoutId = setTimeout( function() { 
  console.log('1 second passed'); 
}, 1000);

// Timers 2

let intervalId = setInterval(
   function() {
      console.log('1 second passed'); 
    }, 1000);

// Selecting DOM elements (index.html)
 <p id="first" class="p1">First Paragraph</p>
  <p name="name1" class="p1">Second Paragraph</p>
  <p class="p3">Third Paragraph</p>

// Selecting DOM elements (index.js)

let element = document.getElementById('first');

element.style.color = 'blue';

console.log(element);

// Promise
let promise = new Promise(function (resolve, reject) {
  setTimeout(resolve, 100, 'someValue');
});
promise.then(value => console.log('fulfilled: ' + value),
  error => console.log('rejected: ' + error));

  // JQuery get
  import $ from 'jquery';

let promise = $.get('https://5c6159a91325a20014976413.mockapi.io/users');
promise.then(data => console.log(data),
() => alert('Error occurerd'));

// JQuery POST
import $ from 'jquery';
let user = {
  'avatar': "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg",
  'createdAt': "2019-02-10T23:24:35.574Z",
  'id': "51",
  'name': "MAQ"
};
var newId;
let postpromise = $.post('https://5c6159a91325a20014976413.mockapi.io/users');
postpromise.then(function (data) {
  // console.log(data);
  newId = data.id;
  let getpromise = $.get('https://5c6159a91325a20014976413.mockapi.io/users/' + newId);
  getpromise.then(data => alert(data.name),
    () => alert('Error occurerd'));

}
  ,
  () => alert('error occured'));

// Accessing form fields
// html code
 <form action="/somepath" method="post" id="user-form">
    <input name="user" placeholder="User Name"/>
    <span id="user-error"></span>
    <br>
    <input name="avatar-file" placeholder="Avatar File"/>
    <span id="avatar-error"></span>
    <br>
    <button type="submit">Submit</button>
  </form>

  // js code
let form = document.getElementById('user-form');

form.addEventListener('submit', event => {

	let user = form.elements['user'];
	let avatarFile = form.elements['avatar-file'];

	let posting = {
		user: user.value,
		avatarFile: avatarFile.value
	};
	
	  
  console.log(posting.user, posting.avatarFile);

	event.preventDefault();

});

